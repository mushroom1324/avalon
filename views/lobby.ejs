<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <style type="text/css">

    .card {
      display: inline-block;
      margin-left: 1vw;
      margin-right: 1vw;
      animation: fadeIn .2s;
    }

    #voteCard {
      position: absolute;
      top:50%;
      left:50%;
      transform: translateX(-50%) translateY(-50%);
      white-space: nowrap;
    }

    .players-name {
      align-self: center;
    }

    .player-list {
      top: 78%;
      left: 47%;
      position: absolute;
      display: flex;
      justify-content: center;
    }

    .players-content {
      text-align: center;
    }

    .players{
      width: 7vw;
      height: 7vw;
      display: flex;
      justify-content: center;
      border-radius: 35%;
      background:#363636;
      text-align: center;
      margin-left: 0.5%;
      margin-right: 0.5%;
    }

    .form-group {
      position: absolute;
      display:inline-block;
      left:3%;
      bottom:3%;
      line-break: anywhere;
    }

    .chatbox {
      bottom: 30%;
      height: 20%;
    }

    .foot {
      overflow-x: hidden;
      position:absolute;
      width:45%;
      height:20%;
      left:1.5%; 
      bottom:2%; 
      background-color:#4751bf;
      border-radius: 30px;
    }  

    #players {
      display:flex;
    }

    #announcement {
      margin-top: 10vh;
      color: #272727;
      text-align: center;
      font-size: 5vw;
      animation: fadeIn .5s linear;
    }

    @keyframes fadeIn{
      from {
          opacity: 0;
      }
      to {
          opacity: 1;
      }
    }

    #startButton {
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translateX(-50%) translateY(-50%);
    }

    #voteContainer {
      position: absolute;
      text-align: center;
      left: 50%;
      top: 50%;
      transform: translateX(-50%) translateY(-50%);
    }
  </style>
</head>
<body>
  <div id="voteCard"></div>
  <div id="voteContainer">
    <div id="timer"></div>
    <div id="voteMessage"></div>
    <div id="voteUser"></div>
  </div>

  <div class="container">
    <span id="players"></span>
    <div id="announcement">대기중입니다..</div>
    <button id="startButton">START</button>
    <form class="form-inline foot">
      <div class="form-group">
        <div class="chatbox">  
          <div id="chatLogs"></div>
        </div>
        <label for="msgForm">대기실: </label>
        <input type="text" class="form-control" id="msgForm">
        <button type="submit" class="btn btn-primary">Send</button>
      </div>
    </form>
    <div class="player-list"></div>    
  </div>

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script src="/js/background.js"></script>
  <script>    
    var socket = io();

    function htmlDecode(input){
    var e = document.createElement('div');
    e.innerHTML = input;
    return e.childNodes.length === 0 ? "" : e.childNodes[0].nodeValue;
    }

    let timerCount;
    function timer(time) {
      timerCount = setInterval(function() {
        $("#timer").html("<div><strong>" + time + "</strong></div>");
        if(time <= 0) {
          clearInterval(timerCount);
        $("#timer").html('');
        }
        time--;
      }, 1000);
    }

    var playerStatus = {
      name: '',
      group: ''
    };

    var userName = JSON.parse(htmlDecode("<%= JSON.stringify(user.name) %>"));
    var userEmail = JSON.parse(htmlDecode("<%= JSON.stringify(user.email) %>"));
    var userNum = 0;
    var state = 0; //-1: starting, 0: not yet started, 1: night, 2: day, 3: finished
    var voteFailed = 0;
    
    //role definitions, to be moved to a JSON file at some point in the near future
    var roles = {
      servant: {
        name: '아충신',
        group: '선',
        id: '',
        _name: ''
      },
      merlin: {
        name: '멀린',
        group: '선',
        id: '',
        _name: ''
      },
      percival: {
        name: '퍼시벌',
        group: '선',
        id: '',
        _name: ''
      },
      mordred: {
        name: '모드레드',
        group: '악',
        id: '',
        _name: ''
      },
      morgana: {
        name: '모르가나',
        group: '악',
        id: '',
        _name: ''
      },
      minion: {
        name: '미니언',
        group: '악',
        id: '',
        _name: ''
      }
    };
    //end role definitions

    //직업 설정, 셔플
    var playerRoles = [
    roles['mordred'],
    roles['merlin'],
    roles['percival'],
    roles['servant'],
    roles['servant'],
    roles['servant'],
    roles['minion']
    ];

    function shuffle (array) {
    var m = userNum, t, i;
  
    while (m) {
      i = Math.floor(Math.random() * m--);
      t = array[m];
      array[m] = array[i];
      array[i] = t;
    }

    return array;
    }
    //까지
    const SEC = 10;
    const MS = 13000;
    var voteCounter = 0;
    var votePlayers = [];
    var expPlayers = [];
    //플레이어 선택 창
    var isSelected = false;
    var timeout;

    function selectExpPlayer(players, round) {

      //dev
      console.log(players.length);
      if(players.length == 2) {
        handleRound(players, 2);
      }

      if(players.length == 5) {
        if(round == 1 || 3) {
          handleRound(players, 2);
        } else if(round == 2||4||5) {
          handleRound(players, 3);
        }
      } else if (players.length == 6) {
        if(round == 1) {
          handleRound(players, 2);
        } else if(round == 2 || 4) {
          handleRound(players, 3);
        } else if(round == 3||5) {
          handleRound(players, 4);
        } 
      } else if ( players.length == 7) {
        if(round == 1) {
          handleRound(players, 2);
        } else if (round == 2 || 3) {
          handleRound(players, 3);
        } else if (round == 4 || 5) {
            handleRound(players, 4);
        }
      } else if ( players.length < 7) {
        if(round==1) {
          handleRound(players, 3);
        } else if(round == 2||3) {
          handleRound(players,4);
        } else if(round == 4||5) {
          handleRound(players,5);
        }
      }
    }

    function handleRound(players, number) {
      console.log(players);
      isSelected = false;
      if(voteCounter == 0) {

        timer(SEC);
        timeout = setTimeout(() => {
          if(isSelected == false) {
            sendExp(players[Math.floor(Math.random()*players.length)], round);
            voteCounter++;
          }
        }, MS);

        $("#voteMessage").append('<div>첫번째 원정대원을 선택해주세요.</div>');
        $("#voteMessage").append('<div>시간 초과시 무작위 선택됩니다.</div>');
        players.forEach(element => {
          $("#voteUser").append(`<button onclick="sendExp('${element}', ${round})">` + element + `</button>`);
        });
      } else if(voteCounter == 1) {

        timer(SEC);
        timeout = setTimeout(() => {
          if(isSelected == false) {
            sendExp(players[Math.floor(Math.random()*players.length)], round);
            voteCounter++;
          }
        }, MS);

        $("#voteMessage").append('<div>두번째 원정대원을 선택해주세요.</div>');
        players.forEach(element => {
          $("#voteUser").append(`<button onclick="sendExp('${element}', ${round})">` + element + `</button>`);
        });
      } else if(voteCounter == 2) {
        if(number == 2) {
          socket.emit("expedition-selection-over", expPlayers);
          expPlayers = [];
          votePlayers = []; // 투표 선택지 초기화
        } else if(number == 3) {

          timer(SEC);
          timeout = setTimeout(() => {
            if(isSelected == false) {
              sendExp(players[Math.floor(Math.random()*players.length)], round);
              voteCounter++;
            }
          }, MS);

          $("#voteMessage").append('<div>세번째 원정대원을 선택해주세요.</div>');
          players.forEach(element => {
            $("#voteUser").append(`<button onclick="sendExp('${element}', ${round})">` + element + `</button>`);
          });

        }
      } else if(voteCounter == 3) {
        if(number == 3) {
          socket.emit("expedition-selection-over", expPlayers);
          expPlayers = [];
          votePlayers = []; // 투표 선택지 초기화
        } else if(number == 4) {

          timer(SEC);
          timeout = setTimeout(() => {
            if(isSelected == false) {
              sendExp(players[Math.floor(Math.random()*players.length)], round);
              voteCounter++;
            }
          }, MS);

          $("#voteMessage").append('<div>네번째 원정대원을 선택해주세요.</div>');
          players.forEach(element => {
            $("#voteUser").append(`<button onclick="sendExp('${element}', ${round})">` + element + `</button>`);
          });

        }
      } else if(voteCounter == 4) {
        if(number == 4) {
          socket.emit("expedition-selection-over", expPlayers);
          expPlayers = [];
          votePlayers = []; // 투표 선택지 초기화
        } else if(number == 5) {

          timer(SEC);
          timeout = setTimeout(() => {
            if(isSelected == false) {
              sendExp(players[Math.floor(Math.random()*players.length)], round);
              voteCounter++;
            }
          }, MS);

          $("#voteMessage").append('<div>다섯번째 원정대원을 선택해주세요.</div>');
          players.forEach(element => {
            $("#voteUser").append(`<button onclick="sendExp('${element}', ${round})">` + element + `</button>`);
          });

        }
      } else if(voteCounter == 3) {
        if(number == 4) {
          socket.emit("expedition-selection-over", expPlayers);
          expPlayers = [];
          votePlayers = []; // 투표 선택지 초기화
        }
      }
    }

    function sendExp(name, round) {
      isSelected = true;
      clearTimeout(timeout);
      clearTimeout(timerCount);
      $("#timer").html('');
      socket.emit('expedition-leader', name);
      $("#voteMessage").html('');
      $("#voteUser").html('');
      voteCounter++;
      votePlayers.splice(votePlayers.indexOf(name),1);
      expPlayers.push(name);
      selectExpPlayer(votePlayers, round);
    }

    function emitVoteResult(result) {
      isVoted = true;
      clearTimeout(timeout);
      clearTimeout(timerCount);
      $("#timer").html('');
      socket.emit('expedition-vote-result', result);
      $("#voteUser").html('');
      if(result == 1) {
        $("#announcement").html("<div><strong>당신은 원정에 찬성하셨습니다...</strong></div>");
      } else if(result == 0) {
        $("#announcement").html("<div><strong>당신은 원정에 반대하셨습니다...</strong></div>");
      } else if(result == 2) {
        $("#announcement").html("<div><strong>시간이 초과되어 찬성 처리되었습니다...</strong></div>");
      }
    }

    function emitExpResult(result) {
      $("#voteUser").html('');
      $("#voteMessage").html('');
      socket.emit('expedition-exp-result', result);
      if(result == 1) {
        $("#announcement").html("<div><strong>당신은 성공 카드를 내셨습니다...</strong></div>");
      } else if(result == 0) {
        $("#announcement").html("<div><strong>당신은 실패 카드를 내셨습니다...</strong></div>");
      }
    }

    $("#startButton").hide();
    
    $("#startButton").click(function(){
      state = -1;
      playerRoles = shuffle(playerRoles);
      socket.emit("start", playerRoles);
    });

    socket.on("gamestart", (roles) => {
      $("nav").hide();
      $("hr").hide();
      $("#startButton").hide();
      $("#chatLogs").append("<div>게임이 시작합니다...</strong></div>");
      socket.emit("assignRoles", socket.id, roles, userName);
    });

    socket.on('assignRolesToClient', (assignedRoles) => {
      $("#announcement").html("<div><strong>" + '당신은 ' + assignedRoles.name + '입니다.<br>당신은 ' + assignedRoles.group + '입니다.' + "</strong></div>");
      playerRoles.find(name => name = assignedRoles.name).id = socket.id;
      playerRoles.find(name => name = assignedRoles.name)._name = userName;
      playerStatus.name = assignedRoles.name;
      playerStatus.group = assignedRoles.group;
    });

    socket.on('expedition-selection', (name, players, round)=> {
      //name: exp-leader
      //players: .id .userName
      console.log('exp selc called');
      $("#announcement").html("<div><strong>" + name + '님이 원정대장입니다.<br>함께할 원정대원을 토의하세요.</strong></div>');
      console.log(players);
      timer(SEC);
      setTimeout(function() {
        $("#announcement").html("<div><strong>" + name + "님이 원정대원을 선택중입니다...</strong></div>");
        if( name == userName ) {  
          players.forEach(element => {votePlayers.push(element.userName);});
          selectExpPlayer(votePlayers, round);
        }
      }, MS);
    });

    socket.on('expedition-selec-alert', (name)=> {
      console.log(name);
      $("#announcement").html("<div><strong>" + '원정대장이 ' + name + '을 선택하였습니다.</strong></div>');
      socket.emit('expedition-vote-submit')
    });

    socket.on('expedition-vote', (arr) => {
      setTimeout(() => {
        var isVoted = false;
        $("#announcement").html("<div><strong>" + arr[0] + '님과 ' + arr[1] + '님의 원정에 찬성하십니까?</strong></div>');
        timer(SEC);
        $("#voteUser").append(`<button onclick="emitVoteResult('1')">찬성</button>`);
        $("#voteUser").append(`<button onclick="emitVoteResult('0')">반대</button>`);
        timeout = setTimeout(() => {
          if(isVoted == false) {
            emitVoteResult('2');
            $("#voteUser").html('');
          }
        }, MS);
      }, 5000);
    });

    socket.on('expedition-vote-card', () => {
      $("#voteCard").append(`<img class="card" src="/images/testcard.png">`);
    });

    socket.on('expedition-vote-alert', (result) => {
      $("#voteCard").html('');
      if(result ==1) {
        $("#announcement").html("<div><strong>원정 투표에 통과하였습니다!</strong></div>");
      } else {
        $("#announcement").html("<div><strong>원정 투표에 통과하지 못하였습니다!</strong></div>");
        voteFailed++;
        //TODO : voteFailed가 5가 되면 게임 패배 로직 여기다 작성
      }
    });

    socket.on('expedition-vote-start-alert', () => {
        $("#announcement").html("<div><strong>원정대원들이 성공/실패 여부를 결정중입니다...</strong></div>");
    })
   
    socket.on('expedition', () => {
        $("#voteMessage").html("<div><strong>성공 또는 실패 카드를 선택해주십시오..</strong></div>");
        $("#voteUser").append(`<button onclick="emitExpResult(1)">성공</button>`);
        $("#voteUser").append(`<button onclick="emitExpResult(0)">실패</button>`);
    });

    socket.on('expedition-exp-card', () => {
      $("#voteCard").append(`<div>CARD</div>`);
    });

    socket.on('expedition-exp-alert', (result) => {
      $("#voteCard").html('');
      if(result ==1) {
        $("#announcement").html("<div><strong>원정에 성공하였습니다!</strong></div>");
      } else {
        $("#announcement").html("<div><strong>원정에 실패하였습니다!</strong></div>");
      }
      // TODO : 상단에 성공/실패토큰
    });

    socket.emit("login", {
      name: userName,
      userid: userEmail
    });


      

    socket.on("logout", function(data, arr, num) {
      $("#chatLogs").append("<div>" + data + " has disconnected from server.</strong></div>");
      userNum = num;
      $(".player-list").html("");
      $("#startButton").hide();
      while(num != 0) {
        $(".player-list").append(`<div class="players"><div class="players-name">` + arr[num-1] + `</div></div>`);
        num--;
      }
    });

    socket.on("login", function(data, arr, num) {
      $("#chatLogs").append("<div><strong>" + data + "</strong> has joined</div>");
      userNum = num;
      $(".player-list").html("");
      while(num != 0) {
        $(".player-list").append(`<div class="players"><div class="players-name">` + arr[num-1] + `</div></div>`);
        num--;
      }
    });

    socket.on("enableStart", function() { 
      $("#startButton").show();
    })

    // 서버로부터의 메시지가 수신되면
    socket.on("chat", function(data) {
      $("#chatLogs").append(`<div class="chat">` + data.msg + " : from <strong>" + data.from.name + "</strong></div>");
    });

    // Send 버튼이 클릭되면
    $("form").submit(function(e) {
      e.preventDefault();
      var $msgForm = $("#msgForm");

      // 서버로 메시지를 전송한다.
      socket.emit("chat", { msg: $msgForm.val() });
      $msgForm.val("");
    });

  </script>
</body>
</html>

