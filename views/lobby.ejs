<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <style type="text/css">

    .tokenContainer {
      text-align: center;
      position: absolute;
      top: 1%;
      left: 50%;
      transform: translateX(-50%);
      white-space: nowrap;
    }

    .heartContainer {
      text-align: center;
      position: absolute;
      top: 17%;
      left: 50%;
      transform: translateX(-50%);
      white-space: nowrap;
    }

    .voteCard {
    }

    .voteCard-inner {
      top:50%;
      left:50%;
      position: relative;
      background-color: transparent;
      transition: transform 0.8s;
    }

    .flip .voteCard-inner {
      position: absolute;
      transform: rotate3d(0, -180, 0, 180deg);
      transform-style: preserve-3d;
    }

    .card-front, .card-back {
      position: absolute;
      -webkit-backface-visibility: hidden; /* Safari */
      backface-visibility: hidden;
    }

    .card-back {
      transform: rotateY(180deg);
    }

    .card {
      position: absolute;
      top:50%;
      left:50%;
    }
    .spread .card0 {
      transition: all 1s ease;
      transform: rotate(-40deg) translateY(-50%);
    }
    .spread .card1 {
      transition: all 1s ease;
      transform: rotate(-20deg) translateY(-50%);
    }
    .spread .card2 {
      transition: all 1s ease;
      transform: translateY(-50%);
    }
    .spread .card3 {
      transition: all 1s ease;
      transform: rotate(20deg) translateY(-50%);
    }
    .spread .card4 {
      transition: all 1s ease;
      transform: rotate(40deg) translateY(-50%);
    }
    .spread .card5 {
      transition: all 1s ease;
      transform: rotate(60deg) translateY(-50%);
    }
    .spread .card6 {
      transition: all 1s ease;
      transform: rotate(80deg) translateY(-50%);
    }
    .spread .card7 {
      transition: all 1s ease;
      transform: rotate(100deg) translateY(-50%);
    }
    .spread .card8 {
      transition: all 1s ease;
      transform: rotate(120deg) translateY(-50%);
    }
    .spread .card9 {
      transition: all 1s ease;
      transform: rotate(140deg) translateY(-50%);
    }
    
    .slide {
      animation: slide 1.0s;
    }

    @keyframes slide {
      from {
      top:200%;
      }
      to {
      top:50%;
      }
    }

    .players-name {
      align-self: center;
    }

    .player-list {
      top: 78%;
      left: 47%;
      position: absolute;
      display: flex;
      justify-content: center;
    }

    .players-content {
      text-align: center;
    }

    .players{
      width: 7vw;
      height: 7vw;
      display: flex;
      justify-content: center;
      border-radius: 35%;
      background:#363636;
      text-align: center;
      margin-left: 0.5%;
      margin-right: 0.5%;
    }

    .form-group {
      position: absolute;
      display:inline-block;
      left:3%;
      bottom:3%;
      line-break: anywhere;
    }

    .chatbox {
      bottom: 30%;
      height: 20%;
    }

    .foot {
      overflow-x: hidden;
      position:absolute;
      width:45%;
      height:20%;
      left:1.5%; 
      bottom:2%; 
      background-color:#4751bf;
      border-radius: 30px;
    }  

    #players {
      display:flex;
    }

    #announcement {
      color: #272727;
      text-align: center;
      font-size: 3vw;
    }

    .fadeIn {
      animation: fadeIn .5s linear;
    }

    #timer {
      text-align: center;
    }

    @keyframes fadeIn{
      from {
          opacity: 0;
          filter: blur(4px);
      }
      to {
          opacity: 1;
          filter: blur(0);
      }
    }

    #startButton {
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translateX(-50%) translateY(-50%);
    }

    #voteContainer {
      position: absolute;
      text-align: center;
      left: 50%;
      top: 50%;
      transform: translateX(-50%) translateY(-50%);
      font-size: 2.5vw;
    }

    /* The flip card container - set the width and height to whatever you want. We have added the border property to demonstrate that the flip itself goes out of the box on hover (remove perspective if you don't want the 3D effect */
    .flip-card {
      background-color: transparent;
      width: 150px;
      height: 200px;
      border: 1px solid #f1f1f1;
      perspective: 1000px; /* Remove this if you don't want the 3D effect */
    }

    /* This container is needed to position the front and back side */
    .flip-card-inner {
      position: relative;
      width: 100%;
      height: 100%;
      text-align: center;
      transition: transform 0.8s;
      transform-style: preserve-3d;
    }

    /* Do an horizontal flip when you move the mouse over the flip box container */
    .flip-card:hover .flip-card-inner {
      transform: rotateY(180deg);
    }

    /* Position the front and back side */
    .flip-card-front, .flip-card-back {
      position: absolute;
      width: 100%;
      height: 100%;
      -webkit-backface-visibility: hidden; /* Safari */
      backface-visibility: hidden;
    }

    /* Style the front side (fallback if image is missing) */
    .flip-card-front {
      background-color: #bbb;
      color: black;
    }

    /* Style the back side */
    .flip-card-back {
      background-color: dodgerblue;
      color: white;
      transform: rotateY(180deg);
    }
  </style>
</head>
<body>
  <div class="flip-card">
    <div class="flip-card-inner">
      <div class="flip-card-front">
        <img src="/images/card.png" alt="Avatar">
      </div>
      <div class="flip-card-back">
        <div class="playerCard"></div>
      </div>
    </div>
  </div>
  <div class="tokenContainer">
    <img id="token1" src="/images/token.png">
    <img id="token2" src="/images/token.png">
    <img id="token3" src="/images/token.png">
    <img id="token4" src="/images/token.png">
    <img id="token5" src="/images/token.png">
  </div>
  <div class="heartContainer">
    <img src="/images/heart.png" id="heart1">
    <img src="/images/heart.png" id="heart2">
    <img src="/images/heart.png" id="heart3">
    <img src="/images/heart.png" id="heart4">
    <img src="/images/heart.png" id="heart5">
  </div>
  <div class="voteCard">
    <div class="voteCard-inner"></div>
  </div>
  <div id="voteContainer">
    <div id="voteMessage"></div>
    <div id="voteUser"></div>
  </div>

  <div class="container">
    <span id="players"></span>
    <div id="timer"></div>
    <div id="announcement">대기중입니다..</div>
    <button id="startButton">START</button>
    <form class="form-inline foot">
      <div class="form-group">
        <div class="chatbox">  
          <div id="chatLogs"></div>
        </div>
        <label for="msgForm">대기실: </label>
        <input type="text" class="form-control" id="msgForm">
        <button type="submit" class="btn btn-primary">Send</button>
      </div>
    </form>
    <div class="player-list"></div>    
  </div>

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script src="/js/background.js"></script>
  <script>    
    var socket = io();

    function htmlDecode(input){
    var e = document.createElement('div');
    e.innerHTML = input;
    return e.childNodes.length === 0 ? "" : e.childNodes[0].nodeValue;
    }

    let timerCount;
    function timer(time) {
      timerCount = setInterval(function() {
        $("#timer").html("<div><strong>" + time + "</strong></div>");
        if(time <= 0) {
          clearInterval(timerCount);
        $("#timer").html('');
        }
        time--;
      }, 1000);
    }

    var playerStatus = {
      name: '',
      group: ''
    };

    var userName = JSON.parse(htmlDecode("<%= JSON.stringify(user.name) %>"));
    var userEmail = JSON.parse(htmlDecode("<%= JSON.stringify(user.email) %>"));
    var userNum = 0;
    var state = 1; //1 대기 0시작
    var voteFailed = 0;
    
    //role definitions, to be moved to a JSON file at some point in the near future
    var roles = {
      servant: {
        name: '아충신',
        group: '선',
        id: '',
        _name: ''
      },
      merlin: {
        name: '멀린',
        group: '선',
        id: '',
        _name: ''
      },
      percival: {
        name: '퍼시벌',
        group: '선',
        id: '',
        _name: ''
      },
      mordred: {
        name: '모드레드',
        group: '악',
        id: '',
        _name: ''
      },
      morgana: {
        name: '모르가나',
        group: '악',
        id: '',
        _name: ''
      },
      minion: {
        name: '미니언',
        group: '악',
        id: '',
        _name: ''
      }
    };
    //end role definitions

    //직업 설정, 셔플
    var playerRoles = [
    roles['mordred'],
    roles['merlin'],
    roles['percival'],
    roles['morgana'],
    roles['servant'],
    roles['servant'],
    roles['minion']
    ];

    function shuffle (array, number) {
    var m = number, t, i;
  
    while (m) {
      i = Math.floor(Math.random() * m--);
      t = array[m];
      array[m] = array[i];
      array[i] = t;
    }

    return array;
    }
    //까지
    const YES = 1;
    const NO = 0;
    const TIMEOUT = 2;
    const SEC = 10;
    const MS = 3000;
    const SYSMS = 5000;
    var voteCounter = 0;
    var votePlayers = [];
    var expPlayers = [];
    //플레이어 선택 창
    var isSelected = false;
    var timeout;

    function selectExpPlayer(players, round) {

      //dev
      if(players.length == 2) {
        handleRound(players, 2, round);
      }

      if(players.length == 5) {
        if(round == 1 || 3) {
          handleRound(players, 2, round);
        } else if(round == 2||4||5) {
          handleRound(players, 3, round);
        }
      } else if (players.length == 6) {
        if(round == 1) {
          handleRound(players, 2, round);
        } else if(round == 2 || 4) {
          handleRound(players, 3, round);
        } else if(round == 3||5) {
          handleRound(players, 4, round);
        } 
      } else if ( players.length == 7) {
        if(round == 1) {
          handleRound(players, 2, round);
        } else if (round == 2 || 3) {
          handleRound(players, 3, round);
        } else if (round == 4 || 5) {
            handleRound(players, 4, round);
        }
      } else if ( players.length > 7) {
        if(round==1) {
          handleRound(players, 3, round);
        } else if(round == 2||3) {
          handleRound(players,4, round);
        } else if(round == 4||5) {
          handleRound(players,5, round);
        }
      }
    }


    function handleRound(players, number, round) {
      isSelected = false;
      if(voteCounter == 0) {

        timer(SEC);
        timeout = setTimeout(() => {
          if(isSelected == false) {
            sendExp(players[Math.floor(Math.random()*players.length)],number, round);
          }
        }, MS);

        $("#voteMessage").append('<div>첫번째 원정대원을 선택해주세요.</div>');
        $("#voteMessage").append('<div>시간 초과시 무작위 선택됩니다.</div>');
        players.forEach(element => {
          $("#voteUser").append(`<button onclick="sendExp('${element}', ${number}, ${round})">` + element + `</button>`);
        });
      } else if(voteCounter == 1) {

        timer(SEC);
        timeout = setTimeout(() => {
          if(isSelected == false) {
            sendExp(players[Math.floor(Math.random()*players.length)], number, round);
          }
        }, MS);

        $("#voteMessage").append('<div>두번째 원정대원을 선택해주세요.</div>');
        players.forEach(element => {
          $("#voteUser").append(`<button onclick="sendExp('${element}', ${number}, ${round})">` + element + `</button>`);
        });
      } else if(voteCounter == 2) {
        if(number == 2) {
          socket.emit("expedition-selection-over", expPlayers);
          expPlayers = [];
          votePlayers = []; // 투표 선택지 초기화
          voteCounter = 0;
        } else if(number == 3) {

          timer(SEC);
          timeout = setTimeout(() => {
            if(isSelected == false) {
              sendExp(players[Math.floor(Math.random()*players.length)], number, round);
            }
          }, MS);

          $("#voteMessage").append('<div>세번째 원정대원을 선택해주세요.</div>');
          players.forEach(element => {
            $("#voteUser").append(`<button onclick="sendExp('${element}', ${number}, ${round})">` + element + `</button>`);
          });

        }
      } else if(voteCounter == 3) {
        if(number == 3) {
          socket.emit("expedition-selection-over", expPlayers);
          expPlayers = [];
          votePlayers = []; // 투표 선택지 초기화
          voteCounter = 0;
        } else if(number == 4) {

          timer(SEC);
          timeout = setTimeout(() => {
            if(isSelected == false) {
              sendExp(players[Math.floor(Math.random()*players.length)], number, round);
            }
          }, MS);

          $("#voteMessage").append('<div>네번째 원정대원을 선택해주세요.</div>');
          players.forEach(element => {
            $("#voteUser").append(`<button onclick="sendExp('${element}', ${number}, ${round})">` + element + `</button>`);
          });

        }
      } else if(voteCounter == 4) {
        if(number == 4) {
          socket.emit("expedition-selection-over", expPlayers);
          expPlayers = [];
          votePlayers = []; // 투표 선택지 초기화
          voteCounter = 0;
        } else if(number == 5) {

          timer(SEC);
          timeout = setTimeout(() => {
            if(isSelected == false) {
              sendExp(players[Math.floor(Math.random()*players.length)], number, round);
            }
          }, MS);

          $("#voteMessage").append('<div>다섯번째 원정대원을 선택해주세요.</div>');
          players.forEach(element => {
            $("#voteUser").append(`<button onclick="sendExp('${element}', ${number}, ${round})">` + element + `</button>`);
          });
        } else if(voteCounter == 5) {
          if(number == 4) {
            socket.emit("expedition-selection-over", expPlayers);
            expPlayers = [];
            votePlayers = []; // 투표 선택지 초기화
            voteCounter = 0;
          }
        } 
      } 
    }

    function sendExp(name, number, round) {
      isSelected = true;
      clearTimeout(timeout);
      clearTimeout(timerCount);
      $("#timer").html('');
      socket.emit('expedition-leader', name);
      $("#voteMessage").html('');
      $("#voteUser").html('');
      voteCounter++;
      votePlayers.splice(votePlayers.indexOf(name),1);
      expPlayers.push(name);
      handleRound(votePlayers, number, round);
    }

    function emitVoteResult(result) {
      isVoted = true;
      clearTimeout(timeout);
      clearTimeout(timerCount);
      $("#timer").html('');
      socket.emit('expedition-vote-result', result);
      $("#voteUser").html('');
      if(result == YES) {
        $("#announcement").html("<div class='announce'><strong>당신은 원정에 찬성하셨습니다...</strong></div>");
        $(".announce").addClass('fadeIn');
      } else if(result == 0) {
        $("#announcement").html("<div class='announce'><strong>당신은 원정에 반대하셨습니다...</strong></div>");
        $(".announce").addClass('fadeIn');
      } else if(result == 2) {
        $("#announcement").html("<div class='announce'><strong>시간이 초과되어 찬성 처리되었습니다...</strong></div>");
        $(".announce").addClass('fadeIn');
      }
    }

    function emitExpResult(result) {
      $("#voteUser").html('');
      $("#voteMessage").html('');
      socket.emit('expedition-exp-result', result);
      if(result == YES) {
        $("#announcement").html("<div class='announce'><strong>당신은 성공 카드를 내셨습니다...</strong></div>");
        $(".announce").addClass('fadeIn');
      } else if(result == NO) {
        $("#announcement").html("<div class='announce'><strong>당신은 실패 카드를 내셨습니다...</strong></div>");
        $(".announce").addClass('fadeIn');
      }
    }

    $("#startButton").hide();
    $(".tokenContainer").hide();
    $(".heartContainer").hide();
    $(".flip-card").hide();
    
    $("#startButton").click(function(){
      state = 0;
      playerRoles = shuffle(playerRoles, userNum);
      socket.emit("start", playerRoles);
    });

    socket.on('reset', ()=> {
      playerStatus = {
        name: '',
        group: ''
      };
      userNum = 0;
      state = 1; //1 대기 0시작
      voteFailed = 0;
    
      roles = {
        servant: {
          name: '아충신',
          group: '선',
          id: '',
          _name: ''
        },
        merlin: {
          name: '멀린',
          group: '선',
          id: '',
          _name: ''
        },
        percival: {
          name: '퍼시벌',
          group: '선',
          id: '',
          _name: ''
        },
        mordred: {
          name: '모드레드',
          group: '악',
          id: '',
          _name: ''
        },
        morgana: {
          name: '모르가나',
          group: '악',
          id: '',
          _name: ''
        },
        minion: {
          name: '미니언',
          group: '악',
          id: '',
          _name: ''
        }
      };
      playerRoles = [
        roles['mordred'],
        roles['merlin'],
        roles['percival'],
        roles['morgana'],
        roles['servant'],
        roles['servant'],
        roles['minion']
      ];
      voteCounter = 0;
      votePlayers = [];
      expPlayers = [];
      isSelected = false;
      timeout = 0;
      $(".tokenContainer").hide();
      $(".heartContainer").hide();
      $(".flip-card").hide();
      $("nav").show();
      $("hr").show();
      $("#chatLogs").append("<div>게임이 종료되었습니다...</strong></div>");

      socket.emit('checkusers');
    });

    socket.on("gamestart", (roles) => {
      $("nav").hide();
      $("hr").hide();
      $("#startButton").hide();
      $(".tokenContainer").show();
      $(".heartContainer").show();
      $(".flip-card").show();
      $("#chatLogs").append("<div>게임이 시작합니다...</strong></div>");
      socket.emit("assignRoles", socket.id, roles, userName);
    });

    socket.on('assignRolesToClient', (assignedRoles) => {
      $("#announcement").html("<div class='announce'><strong>" + '당신은 ' + assignedRoles.name + '입니다.<br>당신은 ' + assignedRoles.group + '입니다.' + "</strong></div>");
      $(".announce").addClass('fadeIn');
      playerRoles.find(name => name = assignedRoles.name).id = socket.id;
      playerRoles.find(name => name = assignedRoles.name)._name = userName;
      playerStatus.name = assignedRoles.name;
      playerStatus.group = assignedRoles.group;
    });
    
    socket.on('create-role-card', (userData) => {
      if(playerStatus.name == '멀린') {
        $(".playerCard").append("<div>멀린</div>");
        $(".playerCard").append("<div>멀린의 능력으로 " + userData.find(element => element.role == '모르가나').userName +"님이 모르가나임을 확인했습니다.</div>");        
      }
      if(playerStatus.name == '모드레드') {
        $(".playerCard").append("<div>모드레드</div>");
        $(".playerCard").append("<div>" + userData.find(element => element.role == '모르가나').userName +"님은 당신의 수하인 모르가나입니다.</div>");        
      }
      if(playerStatus.name == '모르가나') {
        $(".playerCard").append("<div>모르가나</div>");
        $(".playerCard").append("<div>" + userData.find(element => element.role == '모드레드').userName +"님은 당신이 섬기는 모드레드입니다.</div>");        
      }
      if(playerStatus.name == '퍼시벌') {
        $(".playerCard").append("<div>퍼시벌</div>");
        var arr = [];
        arr.push(userData.find(element => element.role == '모르가나').userName);
        arr.push(userData.find(element => element.role == '멀린').userName);
        shuffle(arr, arr.length);
        $(".playerCard").append("<div>퍼시벌의 능력으로 " + arr[0] + "님과 " + arr[1] +"님을 확인했습니다.</div>");
      }
      if(playerStatus.name == '아충신') {
        $(".playerCard").append("<div>아충신</div>");
        $(".playerCard").append("<div>당신은 아서 왕을 섬기는 충성스러운 신하입니다..</div>");   
      }
    });

    socket.on('expedition-selection', (name, players, round)=> {
      //name: exp-leader
      //players: .id .userName
      $(".cardState3").remove();
      $("#announcement").html("<div class='announce'><strong>" + name + '님이 원정대장입니다.<br>함께할 원정대원을 토의하세요.</strong></div>');
      $(".announce").addClass('fadeIn');
      timer(SEC);
      setTimeout(function() {
        $("#announcement").html("<div class='announce'><strong>" + name + "님이 원정대원을 선택중입니다...</strong></div>");
        $(".announce").addClass('fadeIn');
        if( name == userName ) {  
          console.log('pushing players to votePlayers. players is: ' + players);
          console.log('votePlayers before being pushed is : ' + votePlayers);
          players.forEach(element => {votePlayers.push(element.userName);});
          selectExpPlayer(votePlayers, round);
        }
      }, MS);
    });

    socket.on('expedition-selec-alert', (name)=> {
      console.log(name);
      $("#announcement").html("<div class='announce'><strong>" + '원정대장이 ' + name + '을 선택하였습니다.</strong></div>');
      $(".announce").addClass('fadeIn');

      socket.emit('expedition-vote-submit')
    });

    socket.on('expedition-vote', (arr) => {
      setTimeout(() => {
        var isVoted = false;
        if(arr.length == 2) {
          $("#announcement").html("<div class='announce'><strong>" + arr[0] + '님과 ' + arr[1] + '님의 원정에 찬성하십니까?</strong></div>');
          $(".announce").addClass('fadeIn');
        } else if(arr.length == 3) {
          $("#announcement").html("<div class='announce'><strong>" + arr[0] + ', ' + arr[1] + ', ' + arr[2] + '님의 원정에 찬성하십니까?</strong></div>');
          $(".announce").addClass('fadeIn');
        } else if(arr.length == 4) {
          $("#announcement").html("<div class='announce'><strong>" + arr[0] + ', ' + arr[1] + ', ' + arr[2] + ', ' + arr[3] + '님의 원정에 찬성하십니까?</strong></div>');
          $(".announce").addClass('fadeIn');
        } else if(arr.length == 5) {
          $("#announcement").html("<div class='announce'><strong>" + arr[0] + ', ' + arr[1] + ', ' + arr[2] + ', ' + arr[3] + ', ' + arr[4] + '님의 원정에 찬성하십니까?</strong></div>');
          $(".announce").addClass('fadeIn');
        }
        timer(SEC);
        $("#voteUser").append(`<button onclick="emitVoteResult(${YES})">찬성</button>`);
        $("#voteUser").append(`<button onclick="emitVoteResult(${NO})">반대</button>`);
        timeout = setTimeout(() => {
          if(isVoted == false) {
            emitVoteResult(TIMEOUT);
            $("#voteUser").html('');
          }
        }, MS);
      }, SYSMS);
    });


    let voteYes = 0;
    let voteNo = 0;
    socket.on('expedition-vote-card', (vote) => {
      if (vote == 1 || vote == 2) {
        voteYes++;
      } else if (vote == 0) {
        voteNo++;
      }
      $(".voteCard").append(`<img class="cardState1 card" src="/images/testcard.png">`);
      $(".card").addClass('slide');

    });

    let cardCounter = 0;
    socket.on('expedition-vote-alert', (result, num = 0) => {
      if (voteYes > 0) {
        $(".voteCard-inner").append(`<img class="cardState2 card-front card" src="/images/testcard.png">`);
        $(".voteCard-inner").append(`<img class="cardState2 card-back card" src="/images/testcard-yes.png">`);
      } else if (voteYes == 0) {
        $(".voteCard-inner").append(`<img class="cardState2 card-front card" src="/images/testcard.png">`);
        $(".voteCard-inner").append(`<img class="cardState2 card-back card" src="/images/testcard-no.png">`);
      }
      $(".cardState1").remove();
      setTimeout(() => {
        $('.voteCard').addClass('flip');
        setTimeout(() => {
          for(voteYes;voteYes>0;voteYes--) {
            $(".voteCard").append(`<img class="cardState3 card card` + cardCounter + `" src="/images/testcard-yes.png">`);
          }
          for(voteNo;voteNo>0;voteNo--) {
            $(".voteCard").append(`<img class="cardState3 card card` + cardCounter + `" src="/images/testcard-no.png">`);
          }
          $(".cardState2").remove();
          setTimeout(() => {
            $('.card').addClass('spread');
          }, 1000);
        }, 1000);
      }, 1000);


      cardCounter = 0;
      if(result ==1) {
        $("#announcement").html("<div class='announce'><strong>원정 투표에 통과하였습니다!</strong></div>");
        $(".announce").addClass('fadeIn');
      } else {
        $("#announcement").html("<div class='announce'><strong>원정 투표에 통과하지 못하였습니다!</strong></div>");
        $(".announce").addClass('fadeIn');
        $("#heart" + num).hide();
        
        if(num != 5) {
          $("#announcement").append("<div class='announce'><strong>" + (5-num) + "번 더 투표를 통과하지 못하면 악이 승리합니다..</strong></div>");
          $(".announce").addClass('fadeIn');  
        }
      }
    });

    socket.on('expedition-vote-start-alert', () => {
        $(".cardState3").remove();
        $("#announcement").html("<div class='announce'><strong>원정대원들이 성공/실패 여부를 결정중입니다...</strong></div>");
        $(".announce").addClass('fadeIn');
    })
   
    socket.on('expedition', () => {
        $("#voteMessage").html("<div><strong>성공 또는 실패 카드를 선택해주십시오..</strong></div>");
        $("#voteUser").append(`<button onclick="emitExpResult(1)">성공</button>`);
        $("#voteUser").append(`<button onclick="emitExpResult(0)">실패</button>`);
    });

    socket.on('expedition-exp-alert', (result, round) => {
      if(result == YES) {
        $("#announcement").html("<div class='announce'><strong>원정에 성공하였습니다!</strong></div>");
        $(".announce").addClass('fadeIn');
        $("#token" + round).attr("src", "/images/token-succ.png");
      } else {
        $("#announcement").html("<div class='announce'><strong>원정에 실패하였습니다!</strong></div>");
        $(".announce").addClass('fadeIn');
        $("#token" + round).attr("src", "/images/token-fail.png");
      }
      // TODO : 상단에 성공/실패토큰
    });


    //게임의 승리/패배 로직
    socket.on('vote-fail-end', () => {
        $("#announcement").html("<div class='announce'><strong>투표에 다섯 번 실패했습니다! 모드레드와 그의 수하들이 승리합니다!</strong></div>");
        $(".announce").addClass('fadeIn');
    })

    socket.on('win', ()=> {
        $("#announcement").html("<div class='announce'><strong>원정에 세 번 성공했습니다! 아서 왕의 수하들이 승리합니다!</strong></div>")
        $(".announce").addClass('fadeIn');
    })
    
    socket.on('fail', ()=> {
        $("#announcement").html("<div class='announce'><strong>원정에 세 번 실패했습니다! 모드레드와 그의 수하들이 승리합니다!</strong></div>");
        $(".announce").addClass('fadeIn');
    });


    socket.emit("login", {
      name: userName,
      userid: userEmail
    });

    socket.on("logout", function(data, arr, num) {
      $("#chatLogs").append("<div>" + data + " has disconnected from server.</strong></div>");
      userNum = num;
      $(".player-list").html("");
      $("#startButton").hide();
      while(num != 0) {
        $(".player-list").append(`<div class="players"><div class="players-name">` + arr[num-1] + `</div></div>`);
        num--;
      }
    });

    socket.on("login", function(data, arr, num) {
      $("#chatLogs").append("<div><strong>" + data + "</strong> has joined</div>");
      userNum = num;
      $(".player-list").html("");
      while(num != 0) {
        $(".player-list").append(`<div class="players"><div class="players-name">` + arr[num-1] + `</div></div>`);
        num--;
      }
    });

    socket.on("enableStart", function() { 
      $("#startButton").show();
    })

    // 서버로부터의 메시지가 수신되면
    socket.on("chat", function(data) {
      $("#chatLogs").append(`<div class="chat">` + data.msg + " : from <strong>" + data.from.name + "</strong></div>");
    });

    // Send 버튼이 클릭되면
    $("form").submit(function(e) {
      e.preventDefault();
      var $msgForm = $("#msgForm");

      // 서버로 메시지를 전송한다.
      socket.emit("chat", { msg: $msgForm.val() });
      $msgForm.val("");
    });

  </script>
</body>
</html>

